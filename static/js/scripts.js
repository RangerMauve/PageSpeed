// this code was autogenerated from PJS

window.onload = function(){
	new Processing(document.getElementById("sketch"),sketcCode);
}
function sketcCode($p) {
	var Blob = (function () {
		function Blob() {
			var $this_1 = this;

			function $superCstr() {
				$p.extendClassChain($this_1)
			}
			$this_1.position = new $p.PVector();
			$this_1.velocity = new $p.PVector();
			$this_1.radius = 16;
			$this_1.shade = 0xFFFF0000;
			$this_1.speed = 2;

			function $constr_0() {
				$superCstr();

				$this_1.position.set(
					$p.random($this_1.radius, $p.width - $this_1.radius), $p.random($this_1.radius, $p.height - $this_1.radius));
				$this_1.velocity.set(
					$p.random(-1, 1), $p.random(-1, 1));
				$this_1.velocity.mult($this_1.speed);
				$this_1.shade = $p.color($p.random(200, 256), 0, $p.random(64, 256));
			}

			function $constr() {
				if (arguments.length === 0) {
					$constr_0.apply($this_1, arguments);
				} else $superCstr();
			}
			$constr.apply(null, arguments);
		}
		return Blob;
	})();
	$p.Blob = Blob;

	var blobs = new $p.ArrayList();
	var numBlobs = 32;

	function setup() {
		$p.size(512, 256);
		$p.background(255);
		for (var i = numBlobs; i > 0; i--)
			blobs.add(new Blob());
	}
	$p.setup = setup;

	function draw() {
		$p.noStroke();
		$p.fill(255, 255, 255, 12);
		$p.rect(0, 0, $p.width, $p.height);
		$p.stroke(255, 0, 32);
		$p.strokeWeight(32);
		if ($p.pmouseX > 0 && $p.pmouseY > 0) $p.line($p.pmouseX, $p.pmouseY, $p.mouseX, $p.mouseY);
		$p.noStroke();
		for (var $it0 = new $p.ObjectIterator(blobs), b = void(0); $it0.hasNext() && ((b = $it0.next()) || true);) {
			$p.fill(b.shade);
			$p.ellipse(b.position.x, b.position.y, b.radius, b.radius);
			b.position.add(b.velocity);
			if (b.position.x < b.radius) {
				b.velocity.x *= -1;
				b.position.x = b.radius;
			}
			if (b.position.x > $p.width - b.radius) {
				b.velocity.x *= -1;
				b.position.x = $p.width - b.radius;
			}
			if (b.position.y < b.radius) {
				b.velocity.y *= -1;
				b.position.y = b.radius;
			}
			if (b.position.y > $p.height - b.radius) {
				b.velocity.y *= -1;
				b.position.y = $p.height - b.radius;
			}
		}
	}
	$p.draw = draw;
}
